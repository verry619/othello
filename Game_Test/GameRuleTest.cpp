#include "pch.h"

#include "GameRule.h"

constexpr unsigned int ROW_MAX = 6;
constexpr unsigned int COL_MAX = 6;

enum class EN_BOARD_FOR_TEST
{
	ALL_NONE,
	ALL_BLACK,
	ALL_WHITE,
	INIT,
	BW_HALF,
};

const DISC BOARD_ALL_NONE[ROW_MAX][COL_MAX] = { DISC::NONE };
const DISC BOARD_ALL_BLACK[ROW_MAX][COL_MAX] = { DISC::BLACK };
const DISC BOARD_ALL_WHITE[ROW_MAX][COL_MAX] = { DISC::WHITE };
const DISC BOARD_INIT[ROW_MAX][COL_MAX] =
{
	{DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE},
	{DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE},
	{DISC::NONE,DISC::NONE,DISC::BLACK,DISC::WHITE,DISC::NONE,DISC::NONE},
	{DISC::NONE,DISC::NONE,DISC::WHITE,DISC::BLACK,DISC::NONE,DISC::NONE},
	{DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE},
	{DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE,DISC::NONE},
};
const DISC BOARD_BW_HALF[ROW_MAX][COL_MAX] =
{
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
	{DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE,DISC::BLACK,DISC::WHITE},
};

static const std::map<EN_BOARD_FOR_TEST, DISC const> g_mapBoardForTest =
{
	{EN_BOARD_FOR_TEST::ALL_NONE,	BOARD_ALL_NONE[0][0]	},
	{EN_BOARD_FOR_TEST::ALL_BLACK,	BOARD_ALL_BLACK[0][0]	},
	{EN_BOARD_FOR_TEST::ALL_WHITE,	BOARD_ALL_WHITE[0][0]	},
	{EN_BOARD_FOR_TEST::INIT,		BOARD_INIT[0][0]		},
	{EN_BOARD_FOR_TEST::BW_HALF,	BOARD_BW_HALF[0][0]	},
};

void InitializeBoardTest_dataset(BOARD_INFO& stBoardInfo_Tested, EN_BOARD_FOR_TEST enIdx, BOARD_INFO& stBoardInfo_Expected)
{
	/* tested data */
	stBoardInfo_Tested.enSize = { ROW_MAX,COL_MAX };
	memcpy(stBoardInfo_Tested.penDiscs,
		&g_mapBoardForTest.at(enIdx),
		sizeof(DISC) * ROW_MAX * COL_MAX);

	/* expected data */
	stBoardInfo_Expected.enSize = { ROW_MAX,COL_MAX };
	memcpy(stBoardInfo_Expected.penDiscs,
		&BOARD_INIT[0][0],
		sizeof(DISC) * ROW_MAX * COL_MAX);
}

TEST(GameRuleTest, InitializeBoardTest001) {
	/* data initializing */
	DISC enBoard_Tested[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Tested = { 0,0,&enBoard_Tested[0][0] };
	DISC enBoard_Expected[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Expected = { 0,0,&enBoard_Expected[0][0] };

	InitializeBoardTest_dataset(stBoardInfo_Tested, EN_BOARD_FOR_TEST::ALL_NONE, stBoardInfo_Expected);

	/* testing */
	GameRule::InitializeBoard(stBoardInfo_Tested);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucRow, stBoardInfo_Tested.enSize.ucRow);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucCol, stBoardInfo_Tested.enSize.ucCol);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

TEST(GameRuleTest, InitializeBoardTest002) {
	/* data initializing */
	DISC enBoard_Tested[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Tested = { 0,0,&enBoard_Tested[0][0] };
	DISC enBoard_Expected[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Expected = { 0,0,&enBoard_Expected[0][0] };

	InitializeBoardTest_dataset(stBoardInfo_Tested, EN_BOARD_FOR_TEST::ALL_BLACK, stBoardInfo_Expected);

	/* testing */
	GameRule::InitializeBoard(stBoardInfo_Tested);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucRow, stBoardInfo_Tested.enSize.ucRow);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucCol, stBoardInfo_Tested.enSize.ucCol);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

TEST(GameRuleTest, InitializeBoardTest003) {
	/* data initializing */
	DISC enBoard_Tested[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Tested = { 0,0,&enBoard_Tested[0][0] };
	DISC enBoard_Expected[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Expected = { 0,0,&enBoard_Expected[0][0] };

	InitializeBoardTest_dataset(stBoardInfo_Tested, EN_BOARD_FOR_TEST::ALL_WHITE, stBoardInfo_Expected);

	/* testing */
	GameRule::InitializeBoard(stBoardInfo_Tested);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucRow, stBoardInfo_Tested.enSize.ucRow);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucCol, stBoardInfo_Tested.enSize.ucCol);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

TEST(GameRuleTest, InitializeBoardTest004) {
	/* data initializing */
	DISC enBoard_Tested[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Tested = { 0,0,&enBoard_Tested[0][0] };
	DISC enBoard_Expected[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Expected = { 0,0,&enBoard_Expected[0][0] };

	InitializeBoardTest_dataset(stBoardInfo_Tested, EN_BOARD_FOR_TEST::INIT, stBoardInfo_Expected);

	/* testing */
	GameRule::InitializeBoard(stBoardInfo_Tested);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucRow, stBoardInfo_Tested.enSize.ucRow);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucCol, stBoardInfo_Tested.enSize.ucCol);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

TEST(GameRuleTest, InitializeBoardTest005) {
	/* data initializing */
	DISC enBoard_Tested[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Tested = { 0,0,&enBoard_Tested[0][0] };
	DISC enBoard_Expected[ROW_MAX][COL_MAX];
	BOARD_INFO stBoardInfo_Expected = { 0,0,&enBoard_Expected[0][0] };

	InitializeBoardTest_dataset(stBoardInfo_Tested, EN_BOARD_FOR_TEST::BW_HALF, stBoardInfo_Expected);

	/* testing */
	GameRule::InitializeBoard(stBoardInfo_Tested);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucRow, stBoardInfo_Tested.enSize.ucRow);
	EXPECT_EQ(stBoardInfo_Expected.enSize.ucCol, stBoardInfo_Tested.enSize.ucCol);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

void FlipDiscsTest_sub(const DISC_MOVE enDiscMove, DISC* const enBoard_Tested, DISC* const enBoard_Expected, const bool bRet_Expected)
{
	/* data initializing */
	BOARD_INFO stBoardInfo_Tested = { ROW_MAX,COL_MAX,enBoard_Tested };
	BOARD_INFO stBoardInfo_Expected = { ROW_MAX,COL_MAX,enBoard_Expected };

	/* testing */
	bool bRet = GameRule::FlipDiscs(enDiscMove, stBoardInfo_Tested);
	EXPECT_EQ(bRet_Expected, bRet);
	EXPECT_EQ(0, memcmp(stBoardInfo_Expected.penDiscs, stBoardInfo_Tested.penDiscs, sizeof(DISC) * ROW_MAX * COL_MAX));
}

TEST(GameRuleTest, FlipDiscsTest001) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest002) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest003) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest004) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::WHITE,DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest005) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest006) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest007) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}


TEST(GameRuleTest, FlipDiscsTest008) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest009) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest010) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest011) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest012) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest013) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest014) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest015) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest016) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest017) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest018) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::BLACK},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest019) { 
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::BLACK},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest020) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest021) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::WHITE},
		{DISC::BLACK,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK},
		{DISC::BLACK,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest030) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest031) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::WHITE},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest032) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{5,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest033) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{0,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest034) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{5,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK},
		{DISC::WHITE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::WHITE,DISC::WHITE},
		{DISC::WHITE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], true);
}

TEST(GameRuleTest, FlipDiscsTest040) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest041) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest042) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest043) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest044) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest045) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,0} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest0046) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{0,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}


TEST(GameRuleTest, FlipDiscsTest047) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest048) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK,DISC::NONE,	DISC::NONE},
		{DISC::BLACK,	DISC::NONE,	DISC::BLACK,DISC::NONE,	DISC::BLACK,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest050) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest060) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::WHITE,DISC::WHITE,DISC::WHITE,DISC::NONE,	DISC::NONE},
		{DISC::WHITE,	DISC::NONE,	DISC::WHITE,DISC::NONE,	DISC::WHITE,DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest061) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::WHITE,{2,2} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest100) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,6} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest101) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{6,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest102) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::BLACK},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::BLACK},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}

TEST(GameRuleTest, FlipDiscsTest103) {
	/* data initializing */
	DISC_MOVE enDiscMove = { DISC::BLACK,{5,5} };
	DISC enBoard_Tested[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};
	DISC enBoard_Expected[ROW_MAX][COL_MAX] =
	{
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::NONE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::BLACK,DISC::BLACK},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
		{DISC::NONE,	DISC::NONE,	DISC::NONE,	DISC::BLACK,DISC::WHITE,DISC::WHITE},
	};

	FlipDiscsTest_sub(enDiscMove, &enBoard_Tested[0][0], &enBoard_Expected[0][0], false);
}